package com.example.flink.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.flink.item.StickyNoteItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STICKY_NOTE_ITEM".
*/
public class StickyNoteItemDao extends AbstractDao<StickyNoteItem, Long> {

    public static final String TABLENAME = "STICKY_NOTE_ITEM";

    /**
     * Properties of entity StickyNoteItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Statu = new Property(0, int.class, "statu", false, "STATU");
        public final static Property NoteContent = new Property(1, String.class, "noteContent", false, "NOTE_CONTENT");
        public final static Property NoteDate = new Property(2, java.util.Date.class, "noteDate", false, "NOTE_DATE");
        public final static Property Order = new Property(3, int.class, "order", false, "ORDER");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
        public final static Property ParentId = new Property(5, int.class, "parentId", false, "PARENT_ID");
    }


    public StickyNoteItemDao(DaoConfig config) {
        super(config);
    }
    
    public StickyNoteItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STICKY_NOTE_ITEM\" (" + //
                "\"STATU\" INTEGER NOT NULL ," + // 0: statu
                "\"NOTE_CONTENT\" TEXT," + // 1: noteContent
                "\"NOTE_DATE\" INTEGER," + // 2: noteDate
                "\"ORDER\" INTEGER NOT NULL ," + // 3: order
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 4: id
                "\"PARENT_ID\" INTEGER NOT NULL );"); // 5: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STICKY_NOTE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StickyNoteItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatu());
 
        String noteContent = entity.getNoteContent();
        if (noteContent != null) {
            stmt.bindString(2, noteContent);
        }
 
        java.util.Date noteDate = entity.getNoteDate();
        if (noteDate != null) {
            stmt.bindLong(3, noteDate.getTime());
        }
        stmt.bindLong(4, entity.getOrder());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
        stmt.bindLong(6, entity.getParentId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StickyNoteItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatu());
 
        String noteContent = entity.getNoteContent();
        if (noteContent != null) {
            stmt.bindString(2, noteContent);
        }
 
        java.util.Date noteDate = entity.getNoteDate();
        if (noteDate != null) {
            stmt.bindLong(3, noteDate.getTime());
        }
        stmt.bindLong(4, entity.getOrder());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
        stmt.bindLong(6, entity.getParentId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    @Override
    public StickyNoteItem readEntity(Cursor cursor, int offset) {
        StickyNoteItem entity = new StickyNoteItem( //
            cursor.getInt(offset + 0), // statu
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noteContent
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // noteDate
            cursor.getInt(offset + 3), // order
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // id
            cursor.getInt(offset + 5) // parentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StickyNoteItem entity, int offset) {
        entity.setStatu(cursor.getInt(offset + 0));
        entity.setNoteContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoteDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setOrder(cursor.getInt(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setParentId(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StickyNoteItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StickyNoteItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StickyNoteItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
